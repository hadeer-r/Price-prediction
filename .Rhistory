print(most_frequent_kmDriven)
used_car_data$kmDriven[is.na(used_car_data$kmDriven)]<-most_frequent_kmDriven
colSums(is.na(used_car_data))
used_car_data <- used_car_data[, -3]
used_car_data$Age[used_car_data$Age<0]<-used_car_data$Age[used_car_data$Age<0]*(-1)
used_car_data <- used_car_data[, -6]
used_car_data <- used_car_data[, -8]
used_car_data$KmDriven <- as.character(used_car_data$KmDriven)
used_car_data <- read.csv("used_car_dataset.csv", na.strings="")
used_car_data <- read.csv("used_car_dataset.csv", na.strings="")
DF<-data.frame()
View(used_car_data)
dim(used_car_data)
names(used_car_data)
colSums(is.na(used_car_data))
KmDriven_counts <- table(used_car_data$kmDriven)
KmDriven_counts <- table(used_car_data$kmDriven)
sorted_kmDriven_counts <- sort(KmDriven_counts, decreasing = TRUE)
most_frequent_kmDriven <- names(sorted_kmDriven_counts)[1]
print(most_frequent_kmDriven)
used_car_data$kmDriven[is.na(used_car_data$kmDriven)]<-most_frequent_kmDriven
colSums(is.na(used_car_data))
used_car_data <- used_car_data[, -3]
used_car_data$Age[used_car_data$Age<0]<-used_car_data$Age[used_car_data$Age<0]*(-1)
used_car_data <- used_car_data[, -6]
used_car_data <- used_car_data[, -8]
#used_car_data$KmDriven <- as.character(used_car_data$KmDriven)
#used_car_data$KmDriven <- sub("km", "", used_car_data$KmDriven)
used_car_data$Brand <- as.factor(used_car_data$Brand)
used_car_data$Brand <- as.numeric(used_car_data$Brand)
used_car_data$model <- as.factor(used_car_data$model)
used_car_data$model <- as.numeric(used_car_data$model)
used_car_data$kmDriven <- as.factor(used_car_data$kmDriven)
used_car_data$kmDriven <- as.numeric(used_car_data$kmDriven)
used_car_data$Transmission <- as.factor(used_car_data$Transmission)
used_car_data$Transmission <- as.numeric(used_car_data$Transmission)
used_car_data$FuelType <- as.factor(used_car_data$FuelType)
used_car_data$FuelType <- as.numeric(used_car_data$FuelType)
used_car_data$AskPrice <- as.factor(used_car_data$AskPrice)
used_car_data$AskPrice <- as.numeric(used_car_data$AskPrice)
used_car_data <- used_car_data[, -7]
par(mfrow=c(2,3))
used_car_data <- read.csv("used_car_dataset.csv", na.strings="")
DF<-data.frame()
View(used_car_data)
dim(used_car_data)
names(used_car_data)
colSums(is.na(used_car_data))
KmDriven_counts <- table(used_car_data$kmDriven)
KmDriven_counts <- table(used_car_data$kmDriven)
sorted_kmDriven_counts <- sort(KmDriven_counts, decreasing = TRUE)
most_frequent_kmDriven <- names(sorted_kmDriven_counts)[1]
print(most_frequent_kmDriven)
used_car_data$kmDriven[is.na(used_car_data$kmDriven)]<-most_frequent_kmDriven
colSums(is.na(used_car_data))
used_car_data <- used_car_data[, -3]
used_car_data$Age[used_car_data$Age<0]<-used_car_data$Age[used_car_data$Age<0]*(-1)
used_car_data <- used_car_data[, -6]
used_car_data <- used_car_data[, -8]
KmDriven_counts <- table(used_car_data$kmDriven)
print(KmDriven_counts)
sorted_kmDriven_counts <- sort(KmDriven_counts, decreasing = TRUE)
print(sorted_kmDriven_counts)
print(most_frequent_kmDriven)
used_car_data$kmDriven[is.na(used_car_data$kmDriven)]<-most_frequent_kmDriven
colSums(is.na(used_car_data))
used_car_data <- used_car_data[, -3]
print(used_car_data)
used_car_data$Age[used_car_data$Age<0]<-used_car_data$Age[used_car_data$Age<0]*(-1)
used_car_data <- read.csv("used_car_dataset.csv", na.strings="")
DF<-data.frame()
View(used_car_data)
dim(used_car_data)
names(used_car_data)
colSums(is.na(used_car_data))
KmDriven_counts <- table(used_car_data$kmDriven)
sorted_kmDriven_counts <- sort(KmDriven_counts, decreasing = TRUE)
most_frequent_kmDriven <- names(sorted_kmDriven_counts)[1]
print(most_frequent_kmDriven)
used_car_data$kmDriven[is.na(used_car_data$kmDriven)]<-most_frequent_kmDriven
colSums(is.na(used_car_data))
used_car_data <- used_car_data[, -3]
used_car_data$Age[used_car_data$Age<0]<-used_car_data$Age[used_car_data$Age<0]*(-1)
used_car_data <- used_car_data[, -6]
used_car_data <- used_car_data[, -8]
used_car_data$Brand <- as.factor(used_car_data$Brand)
used_car_data$Brand <- as.numeric(used_car_data$Brand)
used_car_data <- read.csv("used_car_dataset.csv", na.strings="")
DF<-data.frame()
View(used_car_data)
dim(used_car_data)
names(used_car_data)
colSums(is.na(used_car_data))
KmDriven_counts <- table(used_car_data$kmDriven)
sorted_kmDriven_counts <- sort(KmDriven_counts, decreasing = TRUE)
most_frequent_kmDriven <- names(sorted_kmDriven_counts)[1]
print(most_frequent_kmDriven)
used_car_data$kmDriven[is.na(used_car_data$kmDriven)]<-most_frequent_kmDriven
colSums(is.na(used_car_data))
used_car_data <- used_car_data[, -3]
used_car_data$Age[used_car_data$Age<0]<-used_car_data$Age[used_car_data$Age<0]*(-1)
used_car_data <- used_car_data[, -6]
used_car_data <- used_car_data[, -8]
#used_car_data$KmDriven <- as.character(used_car_data$KmDriven)
used_car_data['kmDriven'] = used_car_data['kmDriven'].str.replace(' km', '').str.replace(',', '').astype(float)
used_car_data['kmDriven'] = used_car_data['kmDriven'].str.replace(' km', '').str.replace(',', '').astype(float)
used_car_data['kmDriven']
used_car_data['kmDriven'] = used_car_data['kmDriven'].replace
used_car_data$kmDriven <- as.numeric(gsub("[ km,]", "", used_car_data$kmDriven))
used_car_data$AskPrice<-as.numeric(gsub("₹"),"",used_car_data$AskPrice)
used_car_data$AskPrice<-as.numeric(gsub("[ ₹,]"),"",used_car_data$AskPrice)
used_car_data$kmDriven <- as.numeric(gsub("[ km,]", "", used_car_data$kmDriven))
used_car_data$AskPrice <- as.numeric(gsub('[₹,]', '', used_car_data$AskPrice))
used_car_data$Brand <- as.factor(used_car_data$Brand)
used_car_data$Brand <- as.numeric(used_car_data$Brand)
used_car_data$model <- as.factor(used_car_data$model)
used_car_data$model <- as.numeric(used_car_data$model)
used_car_data$kmDriven <- as.factor(used_car_data$kmDriven)
used_car_data$kmDriven <- as.numeric(used_car_data$kmDriven)
used_car_data$Transmission <- as.factor(used_car_data$Transmission)
used_car_data$Transmission <- as.numeric(used_car_data$Transmission)
used_car_data$FuelType <- as.factor(used_car_data$FuelType)
used_car_data$FuelType <- as.numeric(used_car_data$FuelType)
used_car_data$AskPrice <- as.factor(used_car_data$AskPrice)
used_car_data$AskPrice <- as.numeric(used_car_data$AskPrice)
used_car_data <- used_car_data[, -7]
par(mfrow=c(2,3))
library(e1071)
dtrain <- used_car_data[1:8000, ]  # Training data (rows 1 to 7180)
dtest <- used_car_data[8001:9582, ]  # Testing data (rows 7181 to 9582)
# Separate features (x) and target variable (y) for training and testing
x_train <- dtrain[, -7]  # Features for training (all columns except the 7th)
y_train <- dtrain[, 7]   # Target variable for training (7th column)
x_test <- dtest[, -7]    # Features for testing
y_test <- dtest[, 7]     # Target variable for testing
# Train the Naive Bayes model using x and y
library(e1071)  # Ensure the e1071 library is loaded for naiveBayes
ClassCars <- naiveBayes(x_train, y_train)
# Predict the target variable on the test data
PricePrediction <- predict(ClassCars, x_test)
# Calculate accuracy
correct_predictions <- sum(PricePrediction == y_test)  # Count correct predictions
accuracy <- correct_predictions / length(y_test)  # Calculate accuracy
# Print results
print("Predicted Prices:")
print(PricePrediction)
print(paste("Accuracy:", accuracy*100))
install.packages("class")
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 5)
library(class)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 5)
conf_matrix <- confusionMatrix(knn_pred, test_labels)
library(caret)
library(caret)
install.packages("caret")
library(class)
library(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
print(knn_pred)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 5)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*`00`)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 5)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
used_car_data <- read.csv("used_car_dataset.csv", na.strings="")
str(used_car_data)
used_car_data <- read.csv("used_car_dataset.csv", na.strings="")
DF<-data.frame()
View(used_car_data)
dim(used_car_data)
names(used_car_data)
colSums(is.na(used_car_data))
KmDriven_counts <- table(used_car_data$kmDriven)
sorted_kmDriven_counts <- sort(KmDriven_counts, decreasing = TRUE)
most_frequent_kmDriven <- names(sorted_kmDriven_counts)[1]
print(most_frequent_kmDriven)
used_car_data$kmDriven[is.na(used_car_data$kmDriven)]<-most_frequent_kmDriven
colSums(is.na(used_car_data))
used_car_data$PostedDate <- dmy(used_car_data$PostedDate)
install.packages(c("dplyr", "lubridate", "tidyr"))
library(dplyr)
library(lubridate)
library(tidyr)
used_car_data <- read.csv("used_car_dataset.csv", na.strings="")
DF<-data.frame()
View(used_car_data)
dim(used_car_data)
names(used_car_data)
colSums(is.na(used_car_data))
KmDriven_counts <- table(used_car_data$kmDriven)
sorted_kmDriven_counts <- sort(KmDriven_counts, decreasing = TRUE)
most_frequent_kmDriven <- names(sorted_kmDriven_counts)[1]
print(most_frequent_kmDriven)
used_car_data$kmDriven[is.na(used_car_data$kmDriven)]<-most_frequent_kmDriven
colSums(is.na(used_car_data))
used_car_data$PostedDate <- dmy(used_car_data$PostedDate)
install.packages(c("dplyr", "lubridate", "tidyr"))
used_car_data <- read.csv("used_car_dataset.csv", na.strings="")
library(dplyr)
library(lubridate)
library(tidyr)
DF<-data.frame()
View(used_car_data)
dim(used_car_data)
names(used_car_data)
colSums(is.na(used_car_data))
KmDriven_counts <- table(used_car_data$kmDriven)
sorted_kmDriven_counts <- sort(KmDriven_counts, decreasing = TRUE)
most_frequent_kmDriven <- names(sorted_kmDriven_counts)[1]
print(most_frequent_kmDriven)
used_car_data$kmDriven[is.na(used_car_data$kmDriven)]<-most_frequent_kmDriven
colSums(is.na(used_car_data))
#used_car_data$PostedDate <- dmy(used_car_data$PostedDate)
used_car_data <- used_car_data[, -3]
used_car_data$Age[used_car_data$Age<0]<-used_car_data$Age[used_car_data$Age<0]*(-1)
used_car_data <- used_car_data[, -6]
used_car_data <- used_car_data[, -8]
#used_car_data$KmDriven <- as.character(used_car_data$KmDriven)
#.str.replace(' km', '').str.replace(',', '').astype(float)
used_car_data$kmDriven <- as.numeric(gsub("[ km,]", "", used_car_data$kmDriven))
used_car_data$AskPrice <- as.numeric(gsub('[₹,]', '', used_car_data$AskPrice))
used_car_data$Brand <- as.factor(used_car_data$Brand)
used_car_data$Brand <- as.numeric(used_car_data$Brand)
used_car_data$model <- as.factor(used_car_data$model)
used_car_data$model <- as.numeric(used_car_data$model)
used_car_data$kmDriven <- as.factor(used_car_data$kmDriven)
used_car_data$kmDriven <- as.numeric(used_car_data$kmDriven)
used_car_data$Transmission <- as.factor(used_car_data$Transmission)
used_car_data$Transmission <- as.numeric(used_car_data$Transmission)
used_car_data$FuelType <- as.factor(used_car_data$FuelType)
used_car_data$FuelType <- as.numeric(used_car_data$FuelType)
used_car_data$AskPrice <- as.factor(used_car_data$AskPrice)
used_car_data$AskPrice <- as.numeric(used_car_data$AskPrice)
used_car_data <- used_car_data[, -7]
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 5)
library(class)
library(caret)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 5)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 1)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 0.5)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 0)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 20)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 30)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 12)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 3)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 100)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 19)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
knn_pred <- knn(train = dtrain, test = dtest, cl = dtrain$AskPrice, k = 19)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
install.packages("e1071")
install.packages("caTools")
# Loading package
library(e1071)
library(caTools)
train_cl
split <- sample.split(used_car_data, SplitRatio = 0.7)
train_cl <- subset(used_car_data, split == "TRUE")
test_cl <- subset(used_car_data, split == "FALSE")
print(train_cl)
train_scale <- scale(train_cl[, 1:6])
test_scale <- scale(test_cl[, 1:6])
print(train_scale)
split <- sample.split(used_car_data, SplitRatio = 0.7)
train_cl <- subset(used_car_data, split == "TRUE")
test_cl <- subset(used_car_data, split == "FALSE")
print(test_cl)
train_scale <- scale(train_cl[, 1:6])
test_scale <- scale(test_cl[, 1:6])
print(train_scale)
knn_pred <- knn(train = train_scale, test = test_scale, cl = train_cl$AskPrice, k = 19)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
knn_pred <- knn(train = train_scale, test = test_scale, cl = train_cl$AskPrice, k = 1)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
split <- sample.split(used_car_data, SplitRatio = 0.7)
train_cl <- subset(used_car_data, split == "TRUE")
test_cl <- subset(used_car_data, split == "FALSE")
print(test_cl)
# Feature Scaling
train_scale <- scale(train_cl[, 1:6])
test_scale <- scale(test_cl[, 1:6])
print(train_scale)
knn_pred <- knn(train = train_scale, test = test_scale, cl = train_cl$AskPrice, k = 1)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
split <- sample.split(used_car_data, SplitRatio = 0.7)
train_cl <- subset(used_car_data, split == "TRUE")
test_cl <- subset(used_car_data, split == "FALSE")
print(test_cl)
# Feature Scaling
train_scale <- scale(train_cl[, 1:6])
test_scale <- scale(test_cl[, 1:6])
print(train_scale)
knn_pred <- knn(train = train_scale, test = test_scale, cl = train_cl$AskPrice, k = 1)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
split <- sample.split(used_car_data, SplitRatio = 0.7)
train_cl <- subset(used_car_data, split == "TRUE")
test_cl <- subset(used_car_data, split == "FALSE")
print(test_cl)
# Feature Scaling
train_scale <- train_cl[, 1:6]
test_scale <- test_cl[, 1:6]
print(train_scale)
knn_pred <- knn(train = train_scale, test = test_scale, cl = train_cl$AskPrice, k = 1)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
split <- sample.split(used_car_data, SplitRatio = 0.7)
train_cl <- subset(used_car_data, split == "TRUE")
test_cl <- subset(used_car_data, split == "FALSE")
print(test_cl)
# Feature Scaling
train_scale <- train_cl[, 1:6]
test_scale <- test_cl[, 1:6]
print(train_scale)
knn_pred <- knn(train = train_scale, test = test_scale, cl = train_cl$AskPrice, k = 19)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
split <- sample.split(used_car_data, SplitRatio = 0.7)
train_cl <- subset(used_car_data, split == "TRUE")
test_cl <- subset(used_car_data, split == "FALSE")
print(test_cl)
# Feature Scaling
train_scale <- train_cl[, 1:6]
test_scale <- test_cl[, 1:6]
print(train_scale)
knn_pred <- knn(train = train_cl, test = train_cl, cl = train_cl$AskPrice, k = 19)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
split <- sample.split(used_car_data, SplitRatio = 0.7)
train_cl <- subset(used_car_data, split == "TRUE")
test_cl <- subset(used_car_data, split == "FALSE")
print(test_cl)
# Feature Scaling
train_scale <- train_cl[, 1:6]
test_scale <- test_cl[, 1:6]
print(train_scale)
knn_pred <- knn(train = train_cl, test = train_cl, cl = train_cl$AskPrice, k = 1)
correct_predictions_knn <- sum(knn_pred == y_test)
print(correct_predictions_knn)
print(knn_pred)
accuracy_knn <- correct_predictions_knn / length(y_test)
print(accuracy_knn*100)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("broom")
install.packages("ggpubr")
library(ggplot2)
library(dplyr)
library(broom)
library(ggpubr)
install.packages('caTools')
library(caTools)
install.packages('caTools')
library(caTools)
x_train <- dtrain[, -7]  # Features for training (all columns except the 7th)
y_train <- dtrain[, 7]   # Target variable for training (7th column)
x_test <- dtest[, -7]    # Features for testing
y_test <- dtest[, 7]
split <- sample.split(used_car_data, SplitRatio = 0.7)
train_cl <- subset(used_car_data, split == "TRUE")
test_cl <- subset(used_car_data, split == "FALSE")
print(split)
print(trian_cl)
print(train_cl)
linear<- lm(formula = x_train ~ y_train,
data = train_cl)
linear<- lm(formula = train_cl ~ y_train,
data = train_cl)
linear<- lm(formula = train_cl$AskPrice ~ train_cl,
data = train_cl)
View(train_cl)
linear<- lm(formula = train_cl$AskPrice ~ train_cl$Brand+train_cl$model+train_cl$Age+train_cl$model+train_cl$kmDriven+train_cl$Transmission+train_cl$FuelType,
data = train_cl)
summary(linear)
print(predicted_price)
predicted_price <- predict(linear, newdata = test_cl)
predicted_price <- predict(linear, newdata = x_test)
predicted_price <- predict(linear, newdata = train_cl$Brand+train_cl$model+train_cl$Age+train_cl$model+train_cl$kmDriven+train_cl$Transmission+train_cl$FuelType)
test_cl
predicted_price <- predict(linear, newdata = test_cl)
predicted_price <- predict(linear,
newdata = data.frame(
Brand = test_cl$Brand,
model = test_cl$model,
Age = test_cl$Age,
kmDriven = test_cl$kmDriven,
Transmission = test_cl$Transmission,
FuelType = test_cl$FuelType
))
predictions <- predict(linear, newdata = test_cl)
predictions <- predict(linear, newdata = test_cl)
print(predictions)
# Calculate Mean Absolute Error (MAE)
mae <- mean(abs(test_cl$AskPrice - predictions))
print(paste("Mean Absolute Error (MAE):", mae))
# Calculate Mean Squared Error (MSE)
mse <- mean((test_cl$AskPrice - predictions)^2)
print(paste("Mean Squared Error (MSE):", mse))
# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)
print(paste("Root Mean Squared Error (RMSE):", rmse))
# R-squared value on Test Set
rss <- sum((test_cl$AskPrice - predictions)^2)  # Residual Sum of Squares
tss <- sum((test_cl$AskPrice - mean(test_cl$AskPrice))^2)  # Total Sum of Squares
r_squared <- 1 - (rss / tss)
print(paste("R-squared on Test Set:", r_squared)
x
mae <- mean(abs(test_cl$AskPrice - predictions))
print(paste("Mean Absolute Error (MAE):", mae))
mse <- mean((test_cl$AskPrice - predictions)^2)
print(paste("Mean Squared Error (MSE):", mse))
rmse <- sqrt(mse)
print(paste("Root Mean Squared Error (RMSE):", rmse))
rss <- sum((test_cl$AskPrice - predictions)^2)  # Residual Sum of Squares
tss <- sum((test_cl$AskPrice - mean(test_cl$AskPrice))^2)  # Total Sum of Squares
r_squared <- 1 - (rss / tss)
print(paste("R-squared on Test Set:", r_squared))
tss <- sum((test_cl$AskPrice - mean(test_cl$AskPrice))^2)  # Total Sum of Squares
rss <- sum((test_cl$AskPrice - predictions)^2)  # Residual Sum of Squares
predictions <- predict(linear, newdata = x_test)
mae <- mean(abs(test_cl$AskPrice - predictions))
print(paste("Mean Absolute Error (MAE):", mae))
# Calculate Mean Squared Error (MSE)
mse <- mean((test_cl$AskPrice - predictions)^2)
print(paste("Mean Squared Error (MSE):", mse))
# Calculate Root Mean Squared Error (RMSE)
rmse <- sqrt(mse)
print(paste("Root Mean Squared Error (RMSE):", rmse))
# R-squared value on Test Set
rss <- sum((test_cl$AskPrice - predictions)^2)  # Residual Sum of Squares
tss <- sum((test_cl$AskPrice - mean(test_cl$AskPrice))^2)  # Total Sum of Squares
r_squared <- 1 - (rss / tss)
print(paste("R-squared on Test Set:", r_squared))
